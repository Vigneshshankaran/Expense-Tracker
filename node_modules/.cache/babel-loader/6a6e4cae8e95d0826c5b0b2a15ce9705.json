{"ast":null,"code":"var _jsxFileName = \"/home/vignesh/Desktop/Money-Tracker-master/client/src/components/Stats.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport Navbar from \"./Navbar\";\nimport { TransactionsListContext } from \"../context/TransactionsListContext\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CustomPieChart from \"./CustomPieChart\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Stats() {\n  _s();\n\n  const {\n    transactionsList\n  } = useContext(TransactionsListContext);\n  const [currDate, setCurrDate] = useState(new Date().toISOString()); //calculate category wise total for each category for both income and expense\n\n  const incomeCategorywiseTotal = {};\n  const expenseCategorywiseTotal = {};\n  transactionsList.filter(transaction => {\n    return new Date(transaction.date).getMonth() === new Date(currDate).getMonth() && new Date(transaction.date).getFullYear() === new Date(currDate).getFullYear();\n  }).forEach(transaction => {\n    if (transaction.type === \"income\") {\n      if (incomeCategorywiseTotal[transaction.category]) {\n        incomeCategorywiseTotal[transaction.category] += Number(transaction.amount);\n      } else {\n        incomeCategorywiseTotal[transaction.category] = Number(transaction.amount);\n      }\n    } else {\n      if (expenseCategorywiseTotal[transaction.category]) {\n        expenseCategorywiseTotal[transaction.category] += Number(transaction.amount);\n      } else {\n        expenseCategorywiseTotal[transaction.category] = Number(transaction.amount);\n      }\n    }\n  }); //data array for income pie chart\n\n  const incomeChartData = Object.keys(incomeCategorywiseTotal).map(category => {\n    return {\n      category: category,\n      amount: incomeCategorywiseTotal[category]\n    };\n  }); //data array for expense pie chart\n\n  const expenseChartData = Object.keys(expenseCategorywiseTotal).map(category => {\n    return {\n      category: category,\n      amount: expenseCategorywiseTotal[category]\n    };\n  }); //months array to display month\n\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]; //function to go to prev month for prev button\n\n  function handlePrev() {\n    setCurrDate(prevState => {\n      const d = new Date(prevState);\n      d.setMonth(d.getMonth() - 1);\n      return d.toISOString();\n    });\n  } //function to go to next month for next button\n\n\n  function handleNext() {\n    setCurrDate(prevState => {\n      const d = new Date(prevState);\n      d.setMonth(d.getMonth() + 1);\n      return d.toISOString();\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"month-changer\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: handlePrev,\n          children: /*#__PURE__*/_jsxDEV(NavigateBeforeIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [months[new Date(currDate).getMonth()], \" \", new Date(currDate).getFullYear()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: handleNext,\n          children: /*#__PURE__*/_jsxDEV(NavigateNextIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 1,\n        direction: \"row\",\n        justifyContent: \"space-evenly\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"stats-title\",\n              children: \"Income Stats\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), incomeChartData.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no-data\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"no-data-image\",\n                src: \"/images/icons/error.png\",\n                width: \"100px\",\n                height: \"100px\",\n                alt: \"no data\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No Data Available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CustomPieChart, {\n              chartData: incomeChartData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"stats-title\",\n              children: \"Expense Stats\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this), expenseChartData.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no-data\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"no-data-image\",\n                src: \"/images/icons/error.png\",\n                width: \"100px\",\n                height: \"100px\",\n                alt: \"no data\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No Data Available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CustomPieChart, {\n              chartData: expenseChartData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Stats, \"YMuWmt7SZverDKjw4vnc79NpigI=\");\n\n_c = Stats;\nexport default Stats;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stats\");","map":{"version":3,"sources":["/home/vignesh/Desktop/Money-Tracker-master/client/src/components/Stats.jsx"],"names":["React","useState","useContext","Navbar","TransactionsListContext","IconButton","NavigateBeforeIcon","NavigateNextIcon","Grid","CustomPieChart","Paper","Stats","transactionsList","currDate","setCurrDate","Date","toISOString","incomeCategorywiseTotal","expenseCategorywiseTotal","filter","transaction","date","getMonth","getFullYear","forEach","type","category","Number","amount","incomeChartData","Object","keys","map","expenseChartData","months","handlePrev","prevState","d","setMonth","handleNext","length"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport Navbar from \"./Navbar\";\nimport { TransactionsListContext } from \"../context/TransactionsListContext\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CustomPieChart from \"./CustomPieChart\";\nimport Paper from \"@material-ui/core/Paper\";\n\nfunction Stats() {\n  const { transactionsList } = useContext(TransactionsListContext);\n  const [currDate, setCurrDate] = useState(new Date().toISOString());\n\n  //calculate category wise total for each category for both income and expense\n  const incomeCategorywiseTotal = {};\n  const expenseCategorywiseTotal = {};\n\n  transactionsList\n    .filter((transaction) => {\n      return (\n        new Date(transaction.date).getMonth() ===\n          new Date(currDate).getMonth() &&\n        new Date(transaction.date).getFullYear() ===\n          new Date(currDate).getFullYear()\n      );\n    })\n    .forEach((transaction) => {\n      if (transaction.type === \"income\") {\n        if (incomeCategorywiseTotal[transaction.category]) {\n          incomeCategorywiseTotal[transaction.category] += Number(\n            transaction.amount\n          );\n        } else {\n          incomeCategorywiseTotal[transaction.category] = Number(\n            transaction.amount\n          );\n        }\n      } else {\n        if (expenseCategorywiseTotal[transaction.category]) {\n          expenseCategorywiseTotal[transaction.category] += Number(\n            transaction.amount\n          );\n        } else {\n          expenseCategorywiseTotal[transaction.category] = Number(\n            transaction.amount\n          );\n        }\n      }\n    });\n\n  //data array for income pie chart\n  const incomeChartData = Object.keys(incomeCategorywiseTotal).map(\n    (category) => {\n      return {\n        category: category,\n        amount: incomeCategorywiseTotal[category],\n      };\n    }\n  );\n\n  //data array for expense pie chart\n  const expenseChartData = Object.keys(expenseCategorywiseTotal).map(\n    (category) => {\n      return {\n        category: category,\n        amount: expenseCategorywiseTotal[category],\n      };\n    }\n  );\n\n  //months array to display month\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  //function to go to prev month for prev button\n  function handlePrev() {\n    setCurrDate((prevState) => {\n      const d = new Date(prevState);\n      d.setMonth(d.getMonth() - 1);\n      return d.toISOString();\n    });\n  }\n\n  //function to go to next month for next button\n  function handleNext() {\n    setCurrDate((prevState) => {\n      const d = new Date(prevState);\n      d.setMonth(d.getMonth() + 1);\n      return d.toISOString();\n    });\n  }\n\n  return (\n    <div>\n      <Navbar />\n      <div className=\"container-stats\">\n        <div className=\"month-changer\">\n          <IconButton onClick={handlePrev}>\n            <NavigateBeforeIcon />\n          </IconButton>\n          <p>\n            {months[new Date(currDate).getMonth()]}{\" \"}\n            {new Date(currDate).getFullYear()}\n          </p>\n          <IconButton onClick={handleNext}>\n            <NavigateNextIcon />\n          </IconButton>\n        </div>\n\n        {/* pie charts for displaying data */}\n        <Grid\n          container\n          spacing={1}\n          direction=\"row\"\n          justifyContent=\"space-evenly\"\n        >\n          <Grid item xs={12} md={6}>\n            <Paper>\n              <p className=\"stats-title\">Income Stats</p>\n              {incomeChartData.length === 0 && (\n                <div className=\"no-data\">\n                  <img\n                    className=\"no-data-image\"\n                    src={\"/images/icons/error.png\"}\n                    width=\"100px\"\n                    height=\"100px\"\n                    alt=\"no data\"\n                  />\n                  <p>No Data Available.</p>\n                </div>\n              )}\n              <CustomPieChart chartData={incomeChartData} />\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper>\n              <p className=\"stats-title\">Expense Stats</p>\n              {expenseChartData.length === 0 && (\n                <div className=\"no-data\">\n                  <img\n                    className=\"no-data-image\"\n                    src={\"/images/icons/error.png\"}\n                    width=\"100px\"\n                    height=\"100px\"\n                    alt=\"no data\"\n                  />\n                  <p>No Data Available.</p>\n                </div>\n              )}\n              <CustomPieChart chartData={expenseChartData} />\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default Stats;\n"]},"metadata":{},"sourceType":"module"}