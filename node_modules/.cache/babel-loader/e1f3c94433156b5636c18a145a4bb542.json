{"ast":null,"code":"var _jsxFileName = \"/home/vignesh/Desktop/Money-Tracker-master/client/src/context/TransactionsListContext.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from \"react\";\nimport TransactionsListReducer from \"./TransactionsListReducer\"; //initial State\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  transactionsList: [],\n  showMessage: false,\n  message: \"\"\n};\nexport const TransactionsListContext = /*#__PURE__*/createContext(initialState); //provider component\n\nexport const TransactionsListProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(TransactionsListReducer, initialState); //actions\n\n  async function getTransactions() {\n    const response = await fetch(\"http://localhost:8080/api/transactions\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"authToken\")\n      }\n    });\n    const data = await response.json();\n\n    if (data.success === true) {\n      dispatch({\n        type: \"GET_TRANSACTIONS\",\n        payload: data.data\n      });\n    } else {\n      // console.log(data.message);\n      if (data.error === \"jwt malformed\") {\n        localStorage.setItem(\"isAuthenticated\", false);\n      }\n\n      dispatch({\n        type: \"DISPLAY_ERROR_MSG\",\n        payload: data.error\n      });\n    }\n  }\n\n  async function addTransaction(transactionObj) {\n    const response = await fetch(\"http://localhost:8080/api/transactions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"authToken\")\n      },\n      body: JSON.stringify({\n        detail: transactionObj.detail,\n        amount: transactionObj.amount,\n        date: transactionObj.date,\n        type: transactionObj.type,\n        category: transactionObj.category\n      })\n    });\n    const data = await response.json();\n\n    if (data.success === true) {\n      transactionObj._id = data.data._id;\n      dispatch({\n        type: \"ADD_TRANSACTION\",\n        payload: transactionObj\n      });\n    } else {\n      //console.log(data.message);\n      if (data.error === \"jwt malformed\") {\n        localStorage.setItem(\"isAuthenticated\", false);\n      }\n\n      dispatch({\n        type: \"DISPLAY_ERROR_MSG\",\n        payload: data.error\n      });\n    }\n  }\n\n  async function deleteTransaction(transactionId) {\n    const response = await fetch(\"http://localhost:8080/api/transactions/\" + transactionId, {\n      method: \"DELETE\",\n      headers: {\n        \"auth-token\": localStorage.getItem(\"authToken\")\n      }\n    });\n    const data = await response.json();\n\n    if (data.success === true) {\n      dispatch({\n        type: \"DELETE_TRANSACTION\",\n        payload: transactionId\n      });\n    } else {\n      // console.log(data.message);\n      if (data.error === \"jwt malformed\") {\n        localStorage.setItem(\"isAuthenticated\", false);\n      }\n\n      dispatch({\n        type: \"DISPLAY_ERROR_MSG\",\n        payload: data.error\n      });\n    }\n  }\n\n  function resetShowMessage() {\n    dispatch({\n      type: \"RESET_ERROR_MSG\",\n      payload: \"\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(TransactionsListContext.Provider, {\n    value: {\n      transactionsList: state.transactionsList,\n      showMessage: state.showMessage,\n      message: state.message,\n      getTransactions,\n      addTransaction,\n      deleteTransaction,\n      resetShowMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionsListProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = TransactionsListProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsListProvider\");","map":{"version":3,"sources":["/home/vignesh/Desktop/Money-Tracker-master/client/src/context/TransactionsListContext.jsx"],"names":["createContext","useReducer","TransactionsListReducer","initialState","transactionsList","showMessage","message","TransactionsListContext","TransactionsListProvider","children","state","dispatch","getTransactions","response","fetch","method","headers","localStorage","getItem","data","json","success","type","payload","error","setItem","addTransaction","transactionObj","body","JSON","stringify","detail","amount","date","category","_id","deleteTransaction","transactionId","resetShowMessage"],"mappings":"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","sourcesContent":["import { createContext, useReducer } from \"react\";\nimport TransactionsListReducer from \"./TransactionsListReducer\";\n\n//initial State\nconst initialState = {\n  transactionsList: [],\n  showMessage: false,\n  message: \"\",\n};\n\nexport const TransactionsListContext = createContext(initialState);\n\n//provider component\nexport const TransactionsListProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(TransactionsListReducer, initialState);\n\n  //actions\n  async function getTransactions() {\n    const response = await fetch(\"http://localhost:8080/api/transactions\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"authToken\"),\n      },\n    });\n\n    const data = await response.json();\n\n    if (data.success === true) {\n      dispatch({\n        type: \"GET_TRANSACTIONS\",\n        payload: data.data,\n      });\n    } else {\n      // console.log(data.message);\n      if (data.error === \"jwt malformed\") {\n        localStorage.setItem(\"isAuthenticated\", false);\n      }\n      dispatch({\n        type: \"DISPLAY_ERROR_MSG\",\n        payload: data.error,\n      });\n    }\n  }\n\n  async function addTransaction(transactionObj) {\n    const response = await fetch(\"http://localhost:8080/api/transactions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"authToken\"),\n      },\n      body: JSON.stringify({\n        detail: transactionObj.detail,\n        amount: transactionObj.amount,\n        date: transactionObj.date,\n        type: transactionObj.type,\n        category: transactionObj.category,\n      }),\n    });\n\n    const data = await response.json();\n\n    if (data.success === true) {\n      transactionObj._id = data.data._id;\n\n      dispatch({\n        type: \"ADD_TRANSACTION\",\n        payload: transactionObj,\n      });\n    } else {\n      //console.log(data.message);\n      if (data.error === \"jwt malformed\") {\n        localStorage.setItem(\"isAuthenticated\", false);\n      }\n      dispatch({\n        type: \"DISPLAY_ERROR_MSG\",\n        payload: data.error,\n      });\n    }\n  }\n\n  async function deleteTransaction(transactionId) {\n    const response = await fetch(\"http://localhost:8080/api/transactions/\" + transactionId, {\n      method: \"DELETE\",\n      headers: {\n        \"auth-token\": localStorage.getItem(\"authToken\"),\n      },\n    });\n\n    const data = await response.json();\n\n    if (data.success === true) {\n      dispatch({\n        type: \"DELETE_TRANSACTION\",\n        payload: transactionId,\n      });\n    } else {\n      // console.log(data.message);\n      if (data.error === \"jwt malformed\") {\n        localStorage.setItem(\"isAuthenticated\", false);\n      }\n      dispatch({\n        type: \"DISPLAY_ERROR_MSG\",\n        payload: data.error,\n      });\n    }\n  }\n\n  function resetShowMessage() {\n    dispatch({\n      type: \"RESET_ERROR_MSG\",\n      payload: \"\",\n    });\n  }\n\n  return (\n    <TransactionsListContext.Provider\n      value={{\n        transactionsList: state.transactionsList,\n        showMessage: state.showMessage,\n        message: state.message,\n        getTransactions,\n        addTransaction,\n        deleteTransaction,\n        resetShowMessage,\n      }}\n    >\n      {children}\n    </TransactionsListContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}