{"ast":null,"code":"var _jsxFileName = \"/home/vignesh/Desktop/Money-Tracker-master/client/src/components/AddTransaction.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddTransaction(props) {\n  _s();\n\n  //variable for setting default date to present day\n  let dateObj = new Date();\n  let currDate = dateObj.toISOString().slice(0, 10); //options for income and expense categories\n\n  let expenseCategories = [\"Food\", \"Commute\", \"Household\", \"Apparel\", \"Health\", \"Beauty\", \"Education\", \"Gift\", \"Other\"];\n  let incomeCategories = [\"Salary\", \"Allowance\", \"Business\", \"Interest\", \"Gift\", \"Other\"]; //declare states\n  //state for keeping track of user input for a new transaction\n\n  const [inputTransaction, setInputTransaction] = useState({\n    _id: \"\",\n    detail: \"\",\n    amount: \"\",\n    date: currDate,\n    type: \"expense\",\n    category: \"\"\n  }); //state for setting helper text for input textfields\n\n  const [helper, setHelper] = useState({\n    detail: \"\",\n    amount: \"\",\n    type: \"\",\n    category: \"\"\n  }); //state for changing category based on transaction type\n\n  const [categoryArr, setCategoryArr] = useState(expenseCategories); //function for validating user input before making post request to api\n\n  function isValid() {\n    if (inputTransaction.detail === \"\") {\n      setHelper(prev => {\n        return { ...prev,\n          detail: \"Enter transaction detail\"\n        };\n      });\n      return false;\n    }\n\n    if (inputTransaction.amount === \"\") {\n      setHelper(prev => {\n        return { ...prev,\n          amount: \"Enter transaction amount\"\n        };\n      });\n      return false;\n    }\n\n    if (inputTransaction.type === \"\") {\n      setHelper(prev => {\n        return { ...prev,\n          type: \"Select transaction type\"\n        };\n      });\n      return false;\n    }\n\n    if (inputTransaction.category === \"\") {\n      setHelper(prev => {\n        return { ...prev,\n          category: \"Select a category\"\n        };\n      });\n      return false;\n    }\n\n    return true;\n  }\n\n  function handleInputChange(event) {\n    const eventCallerName = event.target.name;\n    const eventCallerValue = event.target.value;\n    setInputTransaction(prevState => {\n      return { ...prevState,\n        [eventCallerName]: eventCallerValue\n      };\n    });\n\n    if (eventCallerName === \"type\") {\n      setCategoryArr(eventCallerValue === \"expense\" ? expenseCategories : incomeCategories);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"add-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"add\",\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n          row: true,\n          name: \"type\",\n          value: inputTransaction.type,\n          onChange: handleInputChange,\n          children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"expense\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 24\n            }, this),\n            label: \"Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"income\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 24\n            }, this),\n            label: \"Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"detail\",\n        label: \"Description\",\n        variant: \"outlined\",\n        onChange: handleInputChange,\n        value: inputTransaction.detail,\n        helperText: helper.detail,\n        onClick: () => setHelper(prev => {\n          return { ...prev,\n            detail: \"\"\n          };\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"amount\",\n        label: \"Amount\",\n        variant: \"outlined\",\n        type: \"Number\",\n        onChange: handleInputChange,\n        value: inputTransaction.amount,\n        helperText: helper.amount,\n        onClick: () => setHelper(prev => {\n          return { ...prev,\n            amount: \"\"\n          };\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"date\",\n        type: \"date\",\n        variant: \"outlined\",\n        value: inputTransaction.date,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          id: \"category-select\",\n          children: \"Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"category-select\",\n          name: \"category\",\n          value: inputTransaction.category,\n          onChange: handleInputChange,\n          onClick: () => setHelper(prev => {\n            return { ...prev,\n              category: \"\"\n            };\n          }),\n          children: categoryArr.map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: item,\n            children: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n          children: helper.category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        name: \"submit\",\n        onClick: event => {\n          event.preventDefault(); //add transaction to the list in parent component \"App\" if non empty inputs\n\n          if (isValid()) {\n            //close the form first if the from appears inside dialog box\n            props.handleFormClose();\n            props.addTransaction(inputTransaction); //clear input field and assign a new id\n\n            setInputTransaction(prevState => {\n              return {\n                _id: \"\",\n                detail: \"\",\n                amount: \"\",\n                date: currDate,\n                type: prevState.type,\n                category: \"\"\n              };\n            });\n          }\n        },\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddTransaction, \"lBsOpR9SK0HRAu0uvqcYIA03GPY=\");\n\n_c = AddTransaction;\nexport default AddTransaction;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTransaction\");","map":{"version":3,"sources":["/home/vignesh/Desktop/Money-Tracker-master/client/src/components/AddTransaction.jsx"],"names":["React","useState","TextField","Button","Radio","RadioGroup","FormControlLabel","FormControl","FormHelperText","InputLabel","MenuItem","Select","AddTransaction","props","dateObj","Date","currDate","toISOString","slice","expenseCategories","incomeCategories","inputTransaction","setInputTransaction","_id","detail","amount","date","type","category","helper","setHelper","categoryArr","setCategoryArr","isValid","prev","handleInputChange","event","eventCallerName","target","name","eventCallerValue","value","prevState","map","item","preventDefault","handleFormClose","addTransaction"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\n\nfunction AddTransaction(props) {\n  //variable for setting default date to present day\n  let dateObj = new Date();\n  let currDate = dateObj.toISOString().slice(0, 10);\n\n  //options for income and expense categories\n  let expenseCategories = [\n    \"Food\",\n    \"Commute\",\n    \"Household\",\n    \"Apparel\",\n    \"Health\",\n    \"Beauty\",\n    \"Education\",\n    \"Gift\",\n    \"Other\",\n  ];\n  let incomeCategories = [\n    \"Salary\",\n    \"Allowance\",\n    \"Business\",\n    \"Interest\",\n    \"Gift\",\n    \"Other\",\n  ];\n\n  //declare states\n  //state for keeping track of user input for a new transaction\n  const [inputTransaction, setInputTransaction] = useState({\n    _id: \"\",\n    detail: \"\",\n    amount: \"\",\n    date: currDate,\n    type: \"expense\",\n    category: \"\",\n  });\n\n  //state for setting helper text for input textfields\n  const [helper, setHelper] = useState({\n    detail: \"\",\n    amount: \"\",\n    type: \"\",\n    category: \"\",\n  });\n\n  //state for changing category based on transaction type\n  const [categoryArr, setCategoryArr] = useState(expenseCategories);\n\n  //function for validating user input before making post request to api\n  function isValid() {\n    if (inputTransaction.detail === \"\") {\n      setHelper((prev) => {\n        return {\n          ...prev,\n          detail: \"Enter transaction detail\",\n        };\n      });\n      return false;\n    }\n\n    if (inputTransaction.amount === \"\") {\n      setHelper((prev) => {\n        return {\n          ...prev,\n          amount: \"Enter transaction amount\",\n        };\n      });\n      return false;\n    }\n\n    if (inputTransaction.type === \"\") {\n      setHelper((prev) => {\n        return {\n          ...prev,\n          type: \"Select transaction type\",\n        };\n      });\n      return false;\n    }\n\n    if (inputTransaction.category === \"\") {\n      setHelper((prev) => {\n        return {\n          ...prev,\n          category: \"Select a category\",\n        };\n      });\n      return false;\n    }\n\n    return true;\n  }\n\n  function handleInputChange(event) {\n    const eventCallerName = event.target.name;\n    const eventCallerValue = event.target.value;\n\n    setInputTransaction((prevState) => {\n      return {\n        ...prevState,\n        [eventCallerName]: eventCallerValue,\n      };\n    });\n\n    if (eventCallerName === \"type\") {\n      setCategoryArr(\n        eventCallerValue === \"expense\" ? expenseCategories : incomeCategories\n      );\n    }\n  }\n\n  return (\n    <div className=\"add-wrapper\">\n      <form id=\"add\" autoComplete=\"off\">\n        <FormControl>\n          {/* <FormLabel>Type</FormLabel> */}\n          <RadioGroup\n            row\n            name=\"type\"\n            value={inputTransaction.type}\n            onChange={handleInputChange}\n          >\n            <FormControlLabel\n              value=\"expense\"\n              control={<Radio color=\"primary\" />}\n              label=\"Expense\"\n            />\n            <FormControlLabel\n              value=\"income\"\n              control={<Radio color=\"primary\" />}\n              label=\"Income\"\n            />\n          </RadioGroup>\n        </FormControl>\n\n        <TextField\n          name=\"detail\"\n          label=\"Description\"\n          variant=\"outlined\"\n          onChange={handleInputChange}\n          value={inputTransaction.detail}\n          helperText={helper.detail}\n          onClick={() =>\n            setHelper((prev) => {\n              return {\n                ...prev,\n                detail: \"\",\n              };\n            })\n          }\n        />\n\n        <TextField\n          name=\"amount\"\n          label=\"Amount\"\n          variant=\"outlined\"\n          type=\"Number\"\n          onChange={handleInputChange}\n          value={inputTransaction.amount}\n          helperText={helper.amount}\n          onClick={() =>\n            setHelper((prev) => {\n              return {\n                ...prev,\n                amount: \"\",\n              };\n            })\n          }\n        />\n\n        <TextField\n          name=\"date\"\n          type=\"date\"\n          variant=\"outlined\"\n          value={inputTransaction.date}\n          onChange={handleInputChange}\n        />\n\n        <FormControl>\n          <InputLabel id=\"category-select\">Category</InputLabel>\n          <Select\n            labelId=\"category-select\"\n            name=\"category\"\n            value={inputTransaction.category}\n            onChange={handleInputChange}\n            onClick={() =>\n              setHelper((prev) => {\n                return {\n                  ...prev,\n                  category: \"\",\n                };\n              })\n            }\n          >\n            {categoryArr.map((item) => (\n              <MenuItem value={item}>{item}</MenuItem>\n            ))}\n          </Select>\n          <FormHelperText>{helper.category}</FormHelperText>\n        </FormControl>\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          name=\"submit\"\n          onClick={(event) => {\n            event.preventDefault();\n\n            //add transaction to the list in parent component \"App\" if non empty inputs\n            if (isValid()) {\n              //close the form first if the from appears inside dialog box\n              props.handleFormClose();\n              props.addTransaction(inputTransaction);\n\n              //clear input field and assign a new id\n              setInputTransaction((prevState) => {\n                return {\n                  _id: \"\",\n                  detail: \"\",\n                  amount: \"\",\n                  date: currDate,\n                  type: prevState.type,\n                  category: \"\",\n                };\n              });\n            }\n          }}\n        >\n          Add\n        </Button>\n      </form>\n    </div>\n  );\n}\n\nexport default AddTransaction;\n"]},"metadata":{},"sourceType":"module"}